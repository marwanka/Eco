{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["socket","openSocket","require","api_ip","App","state","records","toggle","city","cities","toggleDropdown","bind","setCity","emit","offset","limit","setInterval","on","data","setState","this","Dropdown","isOpen","DropdownToggle","caret","DropdownMenu","DropdownItem","header","map","i","onClick","width","height","margin","top","right","left","bottom","dataKey","stroke","type","yAxisId","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"udAKMA,EAASC,IAAWC,EAAQ,KAAiBC,QAE9BC,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CAAEC,QAAS,GAAIC,QAAQ,EAAOC,KAAM,SAAUC,OAAQ,IACnE,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAEfX,EAAOa,KAAK,MAAO,CAAEC,OAAQ,EAAGC,MAAO,GAAIP,KAAM,EAAKH,MAAMG,OAC5DR,EAAOa,KAAK,UACZG,aAAY,WACVhB,EAAOa,KAAK,MAAO,CAAEC,OAAQ,EAAGC,MAAO,GAAIP,KAAM,EAAKH,MAAMG,SAC3D,KAEHR,EAAOiB,GAAG,QAAQ,SAACC,GAAW,EAAKC,SAAS,CAAEb,QAASY,OACvDlB,EAAOiB,GAAG,UAAU,SAACC,GAAW,EAAKC,SAAS,CAAEV,OAAQS,OAd5C,E,6DAiBKE,KAAKD,SAAS,CAACZ,QAASa,KAAKf,MAAME,W,8BAC9CC,GAAQR,EAAOa,KAAK,MAAO,CAAEC,OAAQ,EAAGC,MAAO,GAAIP,KAAMA,IAASY,KAAKD,SAAS,CAACX,KAAMA,M,+BAErF,IAAD,OACP,OACE,6BACE,kBAACa,EAAA,EAAD,CAAUC,OAAQF,KAAKf,MAAME,OAAQA,OAAQa,KAAKV,gBAClD,kBAACa,EAAA,EAAD,CAAgBC,OAAK,GAClBJ,KAAKf,MAAMG,MAEd,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAAM,GAApB,wCACCP,KAAKf,MAAMI,OAAOmB,KAAI,SAACpB,EAAMqB,GAC5B,OAAQ,kBAACH,EAAA,EAAD,CAAcI,QAAS,WAAK,EAAKlB,QAAQJ,KAAUA,QAIjE,uHACA,kBAAC,IAAD,CACEuB,MAAO,IACPC,OAAQ,IACRd,KAAME,KAAKf,MAAMC,QACjB2B,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAEhD,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeC,OAAO,YACtB,kBAAC,IAAD,CAAMC,KAAK,WAAWF,QAAQ,cAAcC,OAAO,UAAUE,QAAS,IACtE,kBAAC,IAAD,CAAMD,KAAK,WAAWF,QAAQ,WAAWC,OAAO,UAAUE,QAAS,IACnE,kBAAC,IAAD,CAAMD,KAAK,WAAWF,QAAQ,WAAWC,OAAO,UAAUE,QAAS,U,GA/C1CC,IAAMC,WCKnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b5fd74c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport openSocket from 'socket.io-client';\nimport {LineChart, XAxis, Tooltip, CartesianGrid, Line} from 'recharts';\nimport {DropdownToggle, Dropdown, DropdownItem, DropdownMenu} from 'reactstrap';\nconst socket = openSocket(require('./config.json').api_ip)\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = { records: [], toggle: false, city: \"Moscow\", cities: [] };\n    this.toggleDropdown = this.toggleDropdown.bind(this);\n    this.setCity = this.setCity.bind(this);\n\n    socket.emit('get', { offset: 0, limit: 10, city: this.state.city });\n    socket.emit('cities');\n    setInterval(()=>{\n      socket.emit('get', { offset: 0, limit: 10, city: this.state.city });\n    }, 300000)\n\n    socket.on('data', (data) => { this.setState({ records: data }); });\n    socket.on('cities', (data) => { this.setState({ cities: data }); });\n  }\n\n  toggleDropdown() { this.setState({toggle: !this.state.toggle}); }\n  setCity(city) { socket.emit('get', { offset: 0, limit: 10, city: city }); this.setState({city: city}); }\n\n  render() {\n    return (\n      <div>\n        <Dropdown isOpen={this.state.toggle} toggle={this.toggleDropdown}>\n        <DropdownToggle caret>\n          {this.state.city}\n          </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header>Города</DropdownItem>\n          {this.state.cities.map((city, i) => {\n            return (<DropdownItem onClick={()=>{this.setCity(city);}}>{city}</DropdownItem>);\n          })}\n        </DropdownMenu>\n      </Dropdown>\n      <span>График экологии</span>\n      <LineChart\n        width={400}\n        height={200}\n        data={this.state.records}\n        margin={{ top: 10, right: 20, left: 10, bottom: 5 }}\n        >\n        <XAxis dataKey=\"citi\" />\n        <Tooltip />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Line type=\"monotone\" dataKey=\"temperature\" stroke=\"#ff7300\" yAxisId={0} />\n        <Line type=\"monotone\" dataKey=\"humidity\" stroke=\"#387908\" yAxisId={1} />\n        <Line type=\"monotone\" dataKey=\"pressure\" stroke=\"#388909\" yAxisId={2} />\n      </LineChart>\n      </div>\n    )\n  }\n\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/scss/bootstrap.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}